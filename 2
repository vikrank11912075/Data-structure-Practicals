/*Doubly linked list*/

#include<stdio.h>
#include<stdlib.h>
struct node
{
    struct node *prev;
    int info;
    struct node *next;
};
struct node *createList(struct node *start);//Function to create linked list
struct node *deleteNode(struct node *start,int data);//Function to delete given node in the list
void display(struct node *start);//Function to display the list
int main()
{
    struct node *start=NULL;
    int data;
    start=createList(start);
    printf("\nList is:");
    display(start);

    printf("\nEnter the number to be deleted:");
    scanf("%d",&data);
    start=deleteNode(start,data);

    printf("\nList is:");
    display(start);
}
struct node *createList(struct node *start)
{
    int data,num_of_nodes;
    printf("Enter the number of nodes to be entered:");
    scanf("%d",&num_of_nodes);
    printf("Enter the number:");
    scanf("%d",&data);

    struct node *temp=(struct node*)malloc(sizeof(struct node));
    temp->info=data;
    temp->prev=NULL;
    temp->next=NULL;
    start=temp;

    for(int i=2;i<=num_of_nodes;i++)
    {
        printf("Enter  the number:");
        scanf("%d",&data);
        struct node *p=start,*temp=(struct node*)malloc(sizeof(struct node));
        temp->info=data;
        temp->next=NULL;
        while(p->next!=NULL)
            p=p->next;
        temp->prev=p;
        p->next=temp;
    }
    return start;
}
struct node *deleteNode(struct node *start,int data)
{
    struct node *temp,*p=start;
    if(start->info==data)
    {
        temp=start;
        start=start->next;
        start->prev=NULL;
        free(temp);
        return start;
    }

    while(p->next!=NULL)
        p=p->next;
    if(p->info==data)
    {
        temp=p;
        p->prev->next=NULL;
        free(temp);
        return start;
    }

    p=start;
    while(p->info!=data)
        p=p->next;
    temp=p;
    p->next->prev=p->prev;
    p->prev->next=p->next;
    free(temp);
    return start;
}
void display(struct node *start)
{
    struct node *p=start;
    while(p!=NULL)
    {
        printf("%d ",p->info);
        p=p->next;
    }
}

