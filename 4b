/*Deque using array*/

#include<stdio.h>
#include<stdlib.h>
#define MAX 100

int queue[MAX],front=-1,rear=-1;

void insertAtFront(int x);//To insert number at front
void insertAtRear(int x);//To insert number at end
int deleteAtRear();//To delete number from end
int deleteAtFront();//To delete number from front
void display();//To display the deque
int isEmpty();//To check if the list is empty or not
int isFull();//To check if the list is full or not

int main()
{
    int choice,x;
    while(1)
    {
        printf("\n1.Insert at front");
        printf("\n2.Insert at rear");
        printf("\n3.Delete at front");
        printf("\n4.Delete at rear");
        printf("\n5.Display");
        printf("\n6.Exit");
        printf("\nEnter your choice:");
        scanf("%d",&choice);

        switch(choice)
        {
        case 1:
            printf("\nEnter the number:");
            scanf("%d",&x);
            insertAtFront(x);
            break;
        case 2:
            printf("\nEnter the number:");
            scanf("%d",&x);
            insertAtRear(x);
            break;
        case 3:
            x=deleteAtFront();
            printf("\nDeleted number is:%d",x);
            break;
        case 4:
            x=deleteAtRear();
            printf("\nDeleted number is:%d",x);
            break;
        case 5:
            display();
            break;
        case 6:
            exit(0);
        }
    }
}
void insertAtFront(int x)
{
    if(isFull())
    {
        printf("Queue is full");
        return;
    }
    if(front==-1)
    {
        front=0;
        rear=0;
    }
    else if(front==0)
        front=MAX-1;
    else
        front=front-1;
    queue[front]=x;
}
void insertAtRear(int x)
{
    if(isFull())
    {
        printf("Queue is full");
        return;
    }
    if(front==-1)
    front=0;
    if(rear==MAX-1)
        rear=0;
    else
        rear=rear+1;
    queue[rear]=x;
}
int deleteAtRear()
{
    int x;
    if(isEmpty())
    {
        printf("Queue is Empty");
        exit(0);
    }
    x=queue[rear];
    if(front==rear)
    {
        front=-1;
        rear=-1;
    }

    else if(rear==0)
        rear=MAX-1;
    else
    rear=rear-1;
    return x;
}
int deleteAtFront()
{
    int x;
    if(isEmpty())
    {
        printf("Queue is Empty");
        exit(0);
    }
    x=queue[front];
    if(front==rear)
    {
        front=-1;
        rear=-1;
    }

    else if(front==MAX-1)
        front=0;
    else
        front=front+1;
    return x;
}
int isFull()
{
    if((front==0 && rear==MAX-1) || front==rear+1)
        return 1;
    else
        return 0;
}
int isEmpty()
{
    if(front==-1)
        return 1;
    else
        return 0;
}
void display()
{
    if(isEmpty())
        return;

    if(front<=rear)
    {
        for(int i=front;i<=rear;i++)
            printf("%d ",queue[i]);
    }
    else
    {
        for(int i=front;i<=MAX-1;i++)
            printf("%d ",queue[i]);
        for(int j=0;j<=rear;j++)
            printf("%d ",queue[j]);
    }
}
